/**
  * @file    app_task_bt.c
  * @brief   Bluetooth Task
  * @author  Igor T. <research.tahoe@gmail.com>
  */


#include "cmsis_os.h"
#include "app.h"
#include "usbd_desc.h"
#include "usbd_cdc.h"
#include "usbd_cdc_interface.h"


extern  QueueHandle_t           app_usb_cdc_xmit_que_hndl;
extern  QueueHandle_t           app_cli_recv_que_hndl;


static
void app_task_bt_send_circular(                 app_stream_t *          p )
{
        size_t          len;


        if( p->tile > p->head )
        {
                len             =   (p->data + CFG_GNSS_BLCK_SIZE_OCT) - p->tile;
                usb_cdc_xmit( p->tile, len );
                p->tile         =   p->data;
        }

        len             =   p->head - p->tile;

        if( len > 0 )
        {
                usb_cdc_xmit( p->tile, len );
                p->tile         +=  len;
        }
}


void app_task_usb(                              void *            argument )
{
        app_stream_t            stream;


        (void) argument;


        while( true )
        {
                if( xQueueReceive( app_usb_cdc_xmit_que_hndl, &stream, portMAX_DELAY ) )
                {
                        switch( stream.type )
                        {
                                case APP_MSG_TYPE_COM1_RECV:
                                        app_task_bt_send_circular( &stream );
                                        break;

                                case APP_MSG_TYPE_COM2_RECV:
                                case APP_MSG_TYPE_USB_RECV:
                                case APP_MSG_TYPE_ERROR:
                                default:
                                        break;
                        }
                }
        }
}
